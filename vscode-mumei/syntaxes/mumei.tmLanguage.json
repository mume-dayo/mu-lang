{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Mumei",
  "scopeName": "source.mumei",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#operators" },
    { "include": "#constants" },
    { "include": "#builtin-functions" },
    { "include": "#discord-functions" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.mumei",
          "match": "#.*$"
        },
        {
          "name": "comment.line.double-slash.mumei",
          "match": "//.*$"
        },
        {
          "name": "comment.block.mumei",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.mumei",
          "match": "\\b(if|elif|else|while|for|in|return|break|continue|pass|try|catch|finally|throw|with|as|match|case)\\b"
        },
        {
          "name": "keyword.declaration.mumei",
          "match": "\\b(let|fun)\\b"
        },
        {
          "name": "keyword.operator.logical.mumei",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.mumei",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.mumei",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.null.mumei",
          "match": "\\bnone\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.mumei",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.mumei",
              "match": "\\\\(n|t|r|\\\\|\"|')"
            }
          ]
        },
        {
          "name": "string.quoted.single.mumei",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.mumei",
              "match": "\\\\(n|t|r|\\\\|\"|')"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.mumei",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.mumei",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.mumei",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.mumei",
          "match": "\\b(print|input|len|type|str|int|float|range|append|pop|env|env_set|env_has|env_list|http_get|http_post|http_request|json_parse|json_stringify|sleep|get_time|async_run|await_task)\\b"
        }
      ]
    },
    "discord-functions": {
      "patterns": [
        {
          "name": "support.function.discord.mumei",
          "match": "\\b(discord_create_bot|discord_command|discord_on_event|discord_run|discord_send)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.mumei",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.mumei",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.assignment.mumei",
          "match": "="
        }
      ]
    }
  }
}
